<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace php;

use \haxe\ds\StringMap;
use \php\_Boot\HxException;
use \php\_Boot\HxAnon;

class Lib {
	/**
	 * @param mixed $o
	 * @param \Array_hx $path
	 * @param mixed $t
	 * 
	 * @return void
	 */
	static public function appendType ($o, $path, $t) {
		#/usr/share/haxe/std/php7/Lib.hx:138: characters 2-7
		throw new HxException("Not implemented");
	}


	/**
	 * @param StringMap $hash
	 * 
	 * @return mixed
	 */
	static public function associativeArrayOfHash ($hash) {
		#/usr/share/haxe/std/php7/Lib.hx:105: characters 2-34
		return $hash->data;
	}


	/**
	 * @param mixed $ob
	 * 
	 * @return mixed
	 */
	static public function associativeArrayOfObject ($ob) {
		#/usr/share/haxe/std/php7/Lib.hx:113: characters 2-25
		return (array)$ob;
	}


	/**
	 * @param mixed $v
	 * 
	 * @return void
	 */
	static public function dump ($v) {
		#/usr/share/haxe/std/php7/Lib.hx:54: characters 2-20
		var_dump($v);
	}


	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	static public function extensionLoaded ($name) {
		#/usr/share/haxe/std/php7/Lib.hx:76: characters 2-38
		return extension_loaded($name);
	}


	/**
	 * @return void
	 */
	static public function getClasses () {
		#/usr/share/haxe/std/php7/Lib.hx:142: characters 2-7
		throw new HxException("Not implemented");
	}


	/**
	 * @param mixed $arr
	 * 
	 * @return StringMap
	 */
	static public function hashOfAssociativeArray ($arr) {
		#/usr/share/haxe/std/php7/Lib.hx:99: characters 2-31
		$result = new StringMap();
		#/usr/share/haxe/std/php7/Lib.hx:100: characters 18-35
		$result->data = $arr;
		#/usr/share/haxe/std/php7/Lib.hx:101: characters 2-15
		return $result;
	}


	/**
	 * @return bool
	 */
	static public function isCli () {
		#/usr/share/haxe/std/php7/Lib.hx:80: characters 2-58
		return 0 === strncasecmp(PHP_SAPI, "cli", 3);
	}


	/**
	 * @param string $pathToLib
	 * 
	 * @return void
	 */
	static public function loadLib ($pathToLib) {
		#/usr/share/haxe/std/php7/Lib.hx:150: characters 2-7
		throw new HxException("Not implemented");
	}


	/**
	 * @param string $to
	 * @param string $subject
	 * @param string $message
	 * @param string $additionalHeaders
	 * @param string $additionalParameters
	 * 
	 * @return bool
	 */
	static public function mail ($to, $subject, $message, $additionalHeaders = null, $additionalParameters = null) {
		#/usr/share/haxe/std/php7/Lib.hx:127: characters 2-7
		throw new HxException("Not implemented");
	}


	/**
	 * @param mixed $arr
	 * 
	 * @return mixed
	 */
	static public function objectOfAssociativeArray ($arr) {
		#/usr/share/haxe/std/php7/Lib.hx:109: characters 2-29
		return new HxAnon($arr);
	}


	/**
	 * @param mixed $v
	 * 
	 * @return void
	 */
	static public function print ($v) {
		#/usr/share/haxe/std/php7/Lib.hx:36: characters 2-28
		echo(\Std::string($v));
	}


	/**
	 * @param string $file
	 * 
	 * @return int
	 */
	static public function printFile ($file) {
		#/usr/share/haxe/std/php7/Lib.hx:87: characters 2-51
		return fpassthru(fopen($file, "r"));
	}


	/**
	 * @param mixed $v
	 * 
	 * @return void
	 */
	static public function println ($v) {
		#/usr/share/haxe/std/php7/Lib.hx:44: characters 2-10
		echo(\Std::string($v));
		#/usr/share/haxe/std/php7/Lib.hx:45: characters 2-13
		echo("\x0A");
	}


	/**
	 * @param mixed $e
	 * 
	 * @return void
	 */
	static public function rethrow ($e) {
		#/usr/share/haxe/std/php7/Lib.hx:134: characters 2-7
		throw new HxException("Not implemented");
	}


	/**
	 * @param mixed $v
	 * 
	 * @return string
	 */
	static public function serialize ($v) {
		#/usr/share/haxe/std/php7/Lib.hx:62: characters 2-28
		return serialize($v);
	}


	/**
	 * @param mixed $a
	 * 
	 * @return \Array_hx
	 */
	static public function toHaxeArray ($a) {
		#/usr/share/haxe/std/php7/Lib.hx:95: characters 2-38
		return \Array_hx::wrap($a);
	}


	/**
	 * @param \Array_hx $a
	 * 
	 * @return mixed
	 */
	static public function toPhpArray ($a) {
		#/usr/share/haxe/std/php7/Lib.hx:91: characters 2-30
		return $a->arr;
	}


	/**
	 * @param string $s
	 * 
	 * @return mixed
	 */
	static public function unserialize ($s) {
		#/usr/share/haxe/std/php7/Lib.hx:69: characters 2-30
		return unserialize($s);
	}
}


Boot::registerClass(Lib::class, 'php.Lib');
