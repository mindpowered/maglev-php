<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace maglev;

use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;
use \php\Boot;
use \haxe\ds\EnumValueMap;
use \php\_NativeArray\NativeArrayIterator;
use \php\Lib;
use \haxe\ds\ObjectMap;
use \haxe\ds\IntMap;
use \_Map\Map_Impl_;

class MagLevPhp {
	/**
	 * @var MagLev
	 */
	public $maglev;


	/**
	 * @param mixed $phpKey
	 * 
	 * @return MagLevPhp
	 */
	static public function getInstance ($phpKey) {
		#/src/maglev/MagLevPhp.hx:25: characters 4-42
		$key = Boot::typedCast(Boot::getClass('String'), $phpKey);
		#/src/maglev/MagLevPhp.hx:26: characters 4-49
		return new MagLevPhp(MagLev::getInstance($key));
	}


	/**
	 * @param MagLev $maglev
	 * 
	 * @return void
	 */
	public function __construct ($maglev1) {
		#/src/maglev/MagLevPhp.hx:20: characters 4-24
		$this->maglev = $maglev1;
	}


	/**
	 * @param mixed $phpMethod
	 * @param mixed $phpArgs
	 * 
	 * @return mixed
	 */
	public function call ($phpMethod, $phpArgs) {
		#/src/maglev/MagLevPhp.hx:43: characters 4-41
		$method = Boot::typedCast(Boot::getClass('String'), $phpMethod);
		#/src/maglev/MagLevPhp.hx:44: characters 4-58
		$haxeArgs = $this->convertToHaxe($phpArgs);
		#/src/maglev/MagLevPhp.hx:45: characters 4-60
		$haxeResult = $this->maglev->call($method, $haxeArgs);
		#/src/maglev/MagLevPhp.hx:46: characters 4-54
		$phpResult = $this->convertToPhp($haxeResult);
		#/src/maglev/MagLevPhp.hx:47: characters 4-20
		return $phpResult;
	}


	/**
	 * @param mixed $data
	 * 
	 * @return mixed
	 */
	public function convertToHaxe ($data) {
		#/src/maglev/MagLevPhp.hx:127: lines 127-173
		$_gthis = $this;
		#/src/maglev/MagLevPhp.hx:130: characters 4-22
		$result = $data;
		#/src/maglev/MagLevPhp.hx:132: lines 132-171
		if (is_array($data)) {
			#/src/maglev/MagLevPhp.hx:134: characters 6-48
			$haxeArray = \Array_hx::wrap($data);
			#/src/maglev/MagLevPhp.hx:135: characters 6-75
			$haxeHash = Lib::hashOfAssociativeArray($data);
			#/src/maglev/MagLevPhp.hx:137: lines 137-149
			if (Boot::equal(array_values($data), $data)) {
				#/src/maglev/MagLevPhp.hx:138: characters 8-32
				$ret = new \Array_hx();
				#/src/maglev/MagLevPhp.hx:139: lines 139-141
				$_g = 0;
				#/src/maglev/MagLevPhp.hx:139: lines 139-141
				while ($_g < $haxeArray->length) {
					#/src/maglev/MagLevPhp.hx:139: characters 13-17
					$item = ($haxeArray->arr[$_g] ?? null);
					#/src/maglev/MagLevPhp.hx:139: lines 139-141
					$_g = $_g + 1;
					#/src/maglev/MagLevPhp.hx:140: characters 10-39
					$x = $this->convertToHaxe($item);
					#/src/maglev/MagLevPhp.hx:140: characters 10-39
					$ret->arr[$ret->length] = $x;
					#/src/maglev/MagLevPhp.hx:140: characters 10-39
					++$ret->length;

				}

				#/src/maglev/MagLevPhp.hx:142: characters 8-18
				return $ret;
			} else {
				#/src/maglev/MagLevPhp.hx:144: characters 8-58
				$ret1 = new StringMap();
				#/src/maglev/MagLevPhp.hx:145: characters 21-36
				$item1 = new NativeArrayIterator(array_map("strval", array_keys($haxeHash->data)));
				#/src/maglev/MagLevPhp.hx:145: characters 21-36
				while ($item1->hasNext()) {
					#/src/maglev/MagLevPhp.hx:145: lines 145-147
					$item2 = $item1->next();
					#/src/maglev/MagLevPhp.hx:146: characters 10-54
					$value = $this->convertToHaxe(($haxeHash->data[$item2] ?? null));
					#/src/maglev/MagLevPhp.hx:146: characters 10-54
					$ret1->data[$item2] = $value;
				}

				#/src/maglev/MagLevPhp.hx:148: characters 8-18
				return $ret1;
			}
		} else if (is_string($data)) {
			#/src/maglev/MagLevPhp.hx:151: characters 6-35
			$haxeString = $data;
			#/src/maglev/MagLevPhp.hx:152: characters 6-25
			$result = $haxeString;
		} else if (is_callable($data)) {
			#/src/maglev/MagLevPhp.hx:155: lines 155-169
			$f = function ()  use (&$data, &$_gthis) {
				#/src/maglev/MagLevPhp.hx:157: characters 8-63
				$nativeArrayOfHaxeArgs = func_get_args();
				#/src/maglev/MagLevPhp.hx:158: characters 8-66
				$haxeArgs = \Array_hx::wrap($nativeArrayOfHaxeArgs);
				#/src/maglev/MagLevPhp.hx:160: characters 8-47
				$haxeArrayOfPhpArgs = new \Array_hx();
				#/src/maglev/MagLevPhp.hx:161: lines 161-163
				$_g1 = 0;
				#/src/maglev/MagLevPhp.hx:161: lines 161-163
				while ($_g1 < $haxeArgs->length) {
					#/src/maglev/MagLevPhp.hx:161: characters 13-20
					$haxeArg = ($haxeArgs->arr[$_g1] ?? null);
					#/src/maglev/MagLevPhp.hx:161: lines 161-163
					$_g1 = $_g1 + 1;
					#/src/maglev/MagLevPhp.hx:162: characters 10-56
					$x1 = $_gthis->convertToPhp($haxeArg);
					#/src/maglev/MagLevPhp.hx:162: characters 10-56
					$haxeArrayOfPhpArgs->arr[$haxeArrayOfPhpArgs->length] = $x1;
					#/src/maglev/MagLevPhp.hx:162: characters 10-56
					++$haxeArrayOfPhpArgs->length;

				}

				#/src/maglev/MagLevPhp.hx:164: characters 8-61
				$phpArgs = $haxeArrayOfPhpArgs->arr;
				#/src/maglev/MagLevPhp.hx:165: characters 8-71
				$phpResult = call_user_func_array($data, $phpArgs);
				#/src/maglev/MagLevPhp.hx:167: characters 8-50
				$haxeResult = $_gthis->convertToHaxe($phpResult);
				#/src/maglev/MagLevPhp.hx:168: characters 8-25
				return $haxeResult;
			};
			#/src/maglev/MagLevPhp.hx:170: characters 6-16
			$result = $f;
		}
		#/src/maglev/MagLevPhp.hx:172: characters 4-17
		return $result;
	}


	/**
	 * @param mixed $data
	 * 
	 * @return mixed
	 */
	public function convertToPhp ($data) {
		#/src/maglev/MagLevPhp.hx:69: lines 69-125
		$_gthis = $this;
		#/src/maglev/MagLevPhp.hx:72: characters 4-22
		$result = $data;
		#/src/maglev/MagLevPhp.hx:74: lines 74-123
		if (($data instanceof \Array_hx)) {
			#/src/maglev/MagLevPhp.hx:75: characters 6-37
			$original = $data;
			#/src/maglev/MagLevPhp.hx:76: characters 6-30
			$arr = new \Array_hx();
			#/src/maglev/MagLevPhp.hx:77: characters 18-37
			$item = $original->iterator();
			#/src/maglev/MagLevPhp.hx:77: characters 18-37
			while ($item->hasNext()) {
				#/src/maglev/MagLevPhp.hx:77: lines 77-79
				$item1 = $item->next();
				#/src/maglev/MagLevPhp.hx:78: characters 8-36
				$x = $this->convertToPhp($item1);
				#/src/maglev/MagLevPhp.hx:78: characters 8-36
				$arr->arr[$arr->length] = $x;
				#/src/maglev/MagLevPhp.hx:78: characters 8-36
				++$arr->length;
			}

			#/src/maglev/MagLevPhp.hx:80: characters 6-38
			$result = $arr->arr;
		} else if (($data instanceof Map_Impl_) || ($data instanceof StringMap) || ($data instanceof IntMap) || ($data instanceof EnumValueMap) || ($data instanceof ObjectMap)) {
			#/src/maglev/MagLevPhp.hx:87: characters 6-43
			$original1 = $data;
			#/src/maglev/MagLevPhp.hx:88: characters 6-57
			$hash = new StringMap();
			#/src/maglev/MagLevPhp.hx:89: characters 18-33
			$item2 = new NativeArrayIterator(array_map("strval", array_keys($original1->data)));
			#/src/maglev/MagLevPhp.hx:89: characters 18-33
			while ($item2->hasNext()) {
				#/src/maglev/MagLevPhp.hx:89: lines 89-91
				$item3 = $item2->next();
				#/src/maglev/MagLevPhp.hx:90: characters 8-52
				$value = $this->convertToPhp(($original1->data[$item3] ?? null));
				#/src/maglev/MagLevPhp.hx:90: characters 8-52
				$hash->data[$item3] = $value;
			}

			#/src/maglev/MagLevPhp.hx:92: characters 6-51
			$result = $hash->data;
		} else if (Boot::is($data, Boot::getClass('String'))) {
			#/src/maglev/MagLevPhp.hx:95: characters 6-44
			$phpString = $data;
			#/src/maglev/MagLevPhp.hx:96: characters 6-24
			$result = $phpString;
		} else if (($data instanceof \Closure) || ($data instanceof HxClosure)) {
			#/src/maglev/MagLevPhp.hx:100: lines 100-112
			$f = function ()  use (&$data, &$_gthis) {
				#/src/maglev/MagLevPhp.hx:102: characters 8-49
				$phpArgs = func_get_args();
				#/src/maglev/MagLevPhp.hx:104: characters 8-46
				$haxeArgs = $_gthis->convertToHaxe($phpArgs);
				#/src/maglev/MagLevPhp.hx:106: characters 8-70
				$phpArrayContainingHaxeArgs = $haxeArgs->arr;
				#/src/maglev/MagLevPhp.hx:108: characters 8-91
				$haxeResult = call_user_func_array($data, $phpArrayContainingHaxeArgs);
				#/src/maglev/MagLevPhp.hx:110: characters 8-49
				$phpResult = $_gthis->convertToPhp($haxeResult);
				#/src/maglev/MagLevPhp.hx:111: characters 8-24
				return $phpResult;
			};
			#/src/maglev/MagLevPhp.hx:113: characters 6-16
			$result = $f;
		} else if (\Reflect::isObject($data)) {
			#/src/maglev/MagLevPhp.hx:116: characters 8-59
			$hash1 = new StringMap();
			#/src/maglev/MagLevPhp.hx:117: characters 8-28
			$original2 = $data;
			#/src/maglev/MagLevPhp.hx:118: lines 118-121
			$_g = 0;
			#/src/maglev/MagLevPhp.hx:118: lines 118-121
			$_g1 = \Reflect::fields($original2);
			#/src/maglev/MagLevPhp.hx:118: lines 118-121
			while ($_g < $_g1->length) {
				#/src/maglev/MagLevPhp.hx:118: characters 13-18
				$field = ($_g1->arr[$_g] ?? null);
				#/src/maglev/MagLevPhp.hx:118: lines 118-121
				$_g = $_g + 1;
				#/src/maglev/MagLevPhp.hx:119: characters 12-59
				$val = \Reflect::getProperty($original2, $field);
				#/src/maglev/MagLevPhp.hx:120: characters 12-29
				$hash1->data[$field] = $val;
			}

			#/src/maglev/MagLevPhp.hx:122: characters 8-35
			$result = $this->convertToPhp($hash1);
		}
		#/src/maglev/MagLevPhp.hx:124: characters 4-17
		return $result;
	}


	/**
	 * @param \Array_hx $arr
	 * 
	 * @return \Array_hx
	 */
	public function dynamicArrayToAnyArray ($arr) {
		#/src/maglev/MagLevPhp.hx:176: characters 4-32
		$results = new \Array_hx();
		#/src/maglev/MagLevPhp.hx:177: lines 177-179
		$_g = 0;
		#/src/maglev/MagLevPhp.hx:177: lines 177-179
		while ($_g < $arr->length) {
			#/src/maglev/MagLevPhp.hx:177: characters 9-10
			$a = ($arr->arr[$_g] ?? null);
			#/src/maglev/MagLevPhp.hx:177: lines 177-179
			$_g = $_g + 1;
			#/src/maglev/MagLevPhp.hx:178: characters 6-21
			$results->arr[$results->length] = $a;
			#/src/maglev/MagLevPhp.hx:178: characters 6-21
			++$results->length;

		}

		#/src/maglev/MagLevPhp.hx:180: characters 4-18
		return $results;
	}


	/**
	 * @param mixed $event
	 * @param mixed $phpArgs
	 * 
	 * @return void
	 */
	public function emit ($event, $phpArgs) {
		#/src/maglev/MagLevPhp.hx:64: characters 4-83
		$haxeArgs = $this->dynamicArrayToAnyArray(\Array_hx::wrap($phpArgs));
		#/src/maglev/MagLevPhp.hx:65: characters 4-39
		$eventStr = Boot::typedCast(Boot::getClass('String'), $event);
		#/src/maglev/MagLevPhp.hx:66: characters 4-40
		$this->maglev->emit($eventStr, $haxeArgs);
	}


	/**
	 * @param mixed $phpEvent
	 * @param \Closure $phpCallback
	 * 
	 * @return void
	 */
	public function listen ($phpEvent, $phpCallback) {
		#/src/maglev/MagLevPhp.hx:53: characters 4-46
		$event = Boot::typedCast(Boot::getClass('String'), $phpEvent);
		#/src/maglev/MagLevPhp.hx:54: lines 54-57
		$haxeCallback = function ($event1, $haxeArgs)  use (&$phpCallback) {
			#/src/maglev/MagLevPhp.hx:55: characters 6-49
			$phpArgs = $haxeArgs->arr;
			#/src/maglev/MagLevPhp.hx:56: characters 6-33
			$phpCallback($event1, $phpArgs);
		};
		#/src/maglev/MagLevPhp.hx:58: characters 4-43
		$this->maglev->listen($event, $haxeCallback);
	}


	/**
	 * @param mixed $phpMethod
	 * @param \Closure $phpCallback
	 * 
	 * @return void
	 */
	public function register ($phpMethod, $phpCallback) {
		#/src/maglev/MagLevPhp.hx:29: lines 29-39
		$_gthis = $this;
		#/src/maglev/MagLevPhp.hx:31: lines 31-36
		$haxeCallback = function ($haxeArgs)  use (&$_gthis, &$phpCallback) {
			#/src/maglev/MagLevPhp.hx:32: characters 6-48
			$phpArgs = $_gthis->convertToPhp($haxeArgs);
			#/src/maglev/MagLevPhp.hx:33: characters 6-47
			$phpResult = $phpCallback($phpArgs);
			#/src/maglev/MagLevPhp.hx:34: characters 6-57
			$haxeResult = $_gthis->convertToHaxe($phpResult);
			#/src/maglev/MagLevPhp.hx:35: characters 6-23
			return $haxeResult;
		};
		#/src/maglev/MagLevPhp.hx:37: characters 4-48
		$method = Boot::typedCast(Boot::getClass('String'), $phpMethod);
		#/src/maglev/MagLevPhp.hx:38: characters 4-46
		$this->maglev->register($method, $haxeCallback);
	}
}


Boot::registerClass(MagLevPhp::class, 'maglev.MagLevPhp');
