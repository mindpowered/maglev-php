<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace maglev;

use \php\Boot;

class MagLevNull extends MagLevAny {
	/**
	 * @return MagLevNull
	 */
	public static function create () {
		#/src/maglev/MagLev.hx:636: characters 9-32
		return new MagLevNull();
	}

	/**
	 * @return int
	 */
	public static function getStaticType () {
		#/src/maglev/MagLev.hx:645: characters 9-17
		return 1;
	}

	/**
	 * @param MagLevAny $o
	 * 
	 * @return MagLevAny
	 */
	public static function wrap ($o) {
		#/src/maglev/MagLev.hx:659: lines 659-663
		if ($o === null) {
			#/src/maglev/MagLev.hx:660: characters 13-36
			return new MagLevNull();
		} else {
			#/src/maglev/MagLev.hx:662: characters 13-21
			return $o;
		}
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#/src/maglev/MagLev.hx:639: characters 9-16
		parent::__construct();
	}

	/**
	 * @return int
	 */
	public function getType () {
		#/src/maglev/MagLev.hx:642: characters 9-17
		return 1;
	}

	/**
	 * @param MagLevAny $other
	 * 
	 * @return bool
	 */
	public function isEqual ($other) {
		#/src/maglev/MagLev.hx:648: lines 648-653
		if ($other->getType() === $this->getType()) {
			#/src/maglev/MagLev.hx:649: characters 13-24
			return true;
		} else {
			#/src/maglev/MagLev.hx:652: characters 13-25
			return false;
		}
	}

	/**
	 * @return MagLevString
	 */
	public function toJson () {
		#/src/maglev/MagLev.hx:656: characters 9-40
		return new MagLevString("null");
	}
}

Boot::registerClass(MagLevNull::class, 'maglev.MagLevNull');
