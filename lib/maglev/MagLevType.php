<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace maglev;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * THIS FILE MUST BE KEPT IN SYNC WITH externs/MagLev.hx!!
 *
 * General rules:
 *   - never take or return a Map, Array, iterator, or anything internal to Haxe
 *   - use Int, String, Bool since these are native in py/js
 *   - all maglev functions are MagLevArray->MagLevResult
 *   - these are only used in logic components, not by users
 *   - should be immutable (need to create new to change values) EXCEPT for Object and Array
 *   - MagLevAny should never be instantiated
 */
class MagLevType extends HxEnum {
	/**
	 * @return MagLevType
	 */
	static public function MagLevType_Array () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_Array', 4, []);
		return $inst;
	}

	/**
	 * @return MagLevType
	 */
	static public function MagLevType_Boolean () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_Boolean', 7, []);
		return $inst;
	}

	/**
	 * @return MagLevType
	 */
	static public function MagLevType_Error () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_Error', 1, []);
		return $inst;
	}

	/**
	 * @return MagLevType
	 */
	static public function MagLevType_Function () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_Function', 2, []);
		return $inst;
	}

	/**
	 * @return MagLevType
	 */
	static public function MagLevType_Null () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_Null', 8, []);
		return $inst;
	}

	/**
	 * @return MagLevType
	 */
	static public function MagLevType_Number () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_Number', 5, []);
		return $inst;
	}

	/**
	 * @return MagLevType
	 */
	static public function MagLevType_Object () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_Object', 3, []);
		return $inst;
	}

	/**
	 * @return MagLevType
	 */
	static public function MagLevType_Result () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_Result', 0, []);
		return $inst;
	}

	/**
	 * @return MagLevType
	 */
	static public function MagLevType_String () {
		static $inst = null;
		if (!$inst) $inst = new MagLevType('MagLevType_String', 6, []);
		return $inst;
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			4 => 'MagLevType_Array',
			7 => 'MagLevType_Boolean',
			1 => 'MagLevType_Error',
			2 => 'MagLevType_Function',
			8 => 'MagLevType_Null',
			5 => 'MagLevType_Number',
			3 => 'MagLevType_Object',
			0 => 'MagLevType_Result',
			6 => 'MagLevType_String',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'MagLevType_Array' => 0,
			'MagLevType_Boolean' => 0,
			'MagLevType_Error' => 0,
			'MagLevType_Function' => 0,
			'MagLevType_Null' => 0,
			'MagLevType_Number' => 0,
			'MagLevType_Object' => 0,
			'MagLevType_Result' => 0,
			'MagLevType_String' => 0,
		];
	}
}

Boot::registerClass(MagLevType::class, 'maglev.MagLevType');
