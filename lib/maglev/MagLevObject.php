<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace maglev;

use \php\Boot;
use \maglev\_MagLev\MagLevType_Impl_;
use \haxe\ds\StringMap;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;

class MagLevObject extends MagLevAny {
	/**
	 * @var StringMap
	 */
	public $values;

	/**
	 * @return MagLevObject
	 */
	public static function create () {
		#/src/maglev/MagLev.hx:299: characters 9-34
		return new MagLevObject();
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#/src/maglev/MagLev.hx:302: characters 9-50
		$this->values = new StringMap();
		#/src/maglev/MagLev.hx:303: characters 9-16
		parent::__construct();
	}

	/**
	 * @return void
	 */
	public function clear () {
		#/src/maglev/MagLev.hx:306: characters 9-23
		$this1 = $this->values;
		$this2 = [];
		$this1->data = $this2;
	}

	/**
	 * @param string $key
	 * 
	 * @return bool
	 */
	public function exists ($key) {
		#/src/maglev/MagLev.hx:309: characters 16-34
		return array_key_exists($key, $this->values->data);
	}

	/**
	 * @param string $key
	 * 
	 * @return MagLevAny
	 */
	public function get ($key) {
		#/src/maglev/MagLev.hx:312: characters 9-48
		return MagLevNull::wrap(($this->values->data[$key] ?? null));
	}

	/**
	 * @return StringMap
	 */
	public function getStringMap () {
		#/src/maglev/MagLev.hx:328: characters 9-22
		return $this->values;
	}

	/**
	 * @return int
	 */
	public function getType () {
		#/src/maglev/MagLev.hx:331: characters 9-44
		return MagLevType_Impl_::$MagLevType_Object;
	}

	/**
	 * @param MagLevAny $other
	 * 
	 * @return bool
	 */
	public function isEqual ($other) {
		#/src/maglev/MagLev.hx:334: lines 334-357
		if ($other->getType() === $this->getType()) {
			#/src/maglev/MagLev.hx:335: characters 13-62
			$obj = Boot::typedCast(Boot::getClass(MagLevObject::class), $other);
			#/src/maglev/MagLev.hx:336: characters 25-38
			$key = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($this->values->data))));
			while ($key->hasNext()) {
				#/src/maglev/MagLev.hx:336: lines 336-352
				$key1 = $key->next();
				#/src/maglev/MagLev.hx:337: characters 17-40
				$found = false;
				#/src/maglev/MagLev.hx:338: characters 17-40
				$equal = false;
				#/src/maglev/MagLev.hx:339: characters 29-54
				$key2 = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($obj->getStringMap()->data))));
				while ($key2->hasNext()) {
					#/src/maglev/MagLev.hx:339: lines 339-348
					$key21 = $key2->next();
					#/src/maglev/MagLev.hx:340: lines 340-347
					if ($key1 === $key21) {
						#/src/maglev/MagLev.hx:341: characters 25-37
						$found = true;
						#/src/maglev/MagLev.hx:342: characters 25-57
						$val = ($this->values->data[$key1] ?? null);
						#/src/maglev/MagLev.hx:343: characters 25-63
						$val2 = ($obj->values->data[$key21] ?? null);
						#/src/maglev/MagLev.hx:344: lines 344-346
						if ($val->isEqual($val2)) {
							#/src/maglev/MagLev.hx:345: characters 29-41
							$equal = true;
						}
					}
				}
				#/src/maglev/MagLev.hx:349: lines 349-351
				if (!$found || !$equal) {
					#/src/maglev/MagLev.hx:350: characters 21-33
					return false;
				}
			}
			#/src/maglev/MagLev.hx:353: characters 13-24
			return true;
		} else {
			#/src/maglev/MagLev.hx:356: characters 13-25
			return false;
		}
	}

	/**
	 * @return MagLevArray
	 */
	public function keys () {
		#/src/maglev/MagLev.hx:315: characters 9-49
		$arr = new MagLevArray();
		#/src/maglev/MagLev.hx:316: characters 18-31
		$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($this->values->data))));
		while ($k->hasNext()) {
			#/src/maglev/MagLev.hx:316: lines 316-318
			$k1 = $k->next();
			#/src/maglev/MagLev.hx:317: characters 13-42
			$arr->push(new MagLevString($k1));
		}
		#/src/maglev/MagLev.hx:319: characters 9-19
		return $arr;
	}

	/**
	 * @param string $key
	 * 
	 * @return bool
	 */
	public function remove ($key) {
		#/src/maglev/MagLev.hx:322: characters 16-34
		return $this->values->remove($key);
	}

	/**
	 * @param string $key
	 * @param MagLevAny $value
	 * 
	 * @return void
	 */
	public function set ($key, $value) {
		#/src/maglev/MagLev.hx:325: characters 9-48
		$this1 = $this->values;
		$value1 = MagLevNull::wrap($value);
		$this1->data[$key] = $value1;
	}

	/**
	 * @return MagLevString
	 */
	public function toJson () {
		#/src/maglev/MagLev.hx:360: characters 9-28
		$s = "{";
		#/src/maglev/MagLev.hx:361: characters 9-31
		$first = true;
		#/src/maglev/MagLev.hx:362: characters 21-34
		$key = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($this->values->data))));
		while ($key->hasNext()) {
			#/src/maglev/MagLev.hx:362: lines 362-370
			$key1 = $key->next();
			#/src/maglev/MagLev.hx:363: lines 363-365
			if (!$first) {
				#/src/maglev/MagLev.hx:364: characters 17-26
				$s = ($s??'null') . ", ";
			}
			#/src/maglev/MagLev.hx:366: characters 13-21
			$s = ($s??'null') . ($key1??'null');
			#/src/maglev/MagLev.hx:367: characters 13-22
			$s = ($s??'null') . ": ";
			#/src/maglev/MagLev.hx:368: characters 13-38
			$s = ($s??'null') . (\Std::string(($this->values->data[$key1] ?? null)->toJson())??'null');
			#/src/maglev/MagLev.hx:369: characters 13-26
			$first = false;
		}
		#/src/maglev/MagLev.hx:371: characters 9-17
		$s = ($s??'null') . "}";
		#/src/maglev/MagLev.hx:372: characters 9-35
		return new MagLevString($s);
	}
}

Boot::registerClass(MagLevObject::class, 'maglev.MagLevObject');
