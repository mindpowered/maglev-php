<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace maglev;

use \php\Boot;
use \maglev\_MagLevTypes\MagLevType_Impl_;
use \haxe\ds\StringMap;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;

class MagLevObject extends MagLevAny {
	/**
	 * @var StringMap
	 */
	public $values;

	/**
	 * @return MagLevObject
	 */
	public static function create () {
		#/src/maglev/MagLevTypes.hx:223: characters 9-34
		return new MagLevObject();
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#/src/maglev/MagLevTypes.hx:226: characters 9-50
		$this->values = new StringMap();
		#/src/maglev/MagLevTypes.hx:227: characters 9-16
		parent::__construct();
	}

	/**
	 * @return void
	 */
	public function clear () {
		#/src/maglev/MagLevTypes.hx:230: characters 9-23
		$this1 = $this->values;
		$this2 = [];
		$this1->data = $this2;
	}

	/**
	 * @param string $key
	 * 
	 * @return bool
	 */
	public function exists ($key) {
		#/src/maglev/MagLevTypes.hx:233: characters 16-34
		return array_key_exists($key, $this->values->data);
	}

	/**
	 * @param string $key
	 * 
	 * @return MagLevAny
	 */
	public function get ($key) {
		#/src/maglev/MagLevTypes.hx:236: characters 9-48
		return MagLevNull::wrap(($this->values->data[$key] ?? null));
	}

	/**
	 * @return StringMap
	 */
	public function getStringMap () {
		#/src/maglev/MagLevTypes.hx:252: characters 9-22
		return $this->values;
	}

	/**
	 * @return int
	 */
	public function getType () {
		#/src/maglev/MagLevTypes.hx:255: characters 9-44
		return MagLevType_Impl_::$MagLevType_Object;
	}

	/**
	 * @param MagLevAny $other
	 * 
	 * @return bool
	 */
	public function isEqual ($other) {
		#/src/maglev/MagLevTypes.hx:258: lines 258-281
		if ($other->getType() === $this->getType()) {
			#/src/maglev/MagLevTypes.hx:259: characters 13-62
			$obj = Boot::typedCast(Boot::getClass(MagLevObject::class), $other);
			#/src/maglev/MagLevTypes.hx:260: characters 25-38
			$key = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($this->values->data))));
			while ($key->hasNext()) {
				#/src/maglev/MagLevTypes.hx:260: lines 260-276
				$key1 = $key->next();
				#/src/maglev/MagLevTypes.hx:261: characters 17-40
				$found = false;
				#/src/maglev/MagLevTypes.hx:262: characters 17-40
				$equal = false;
				#/src/maglev/MagLevTypes.hx:263: characters 29-54
				$key2 = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($obj->getStringMap()->data))));
				while ($key2->hasNext()) {
					#/src/maglev/MagLevTypes.hx:263: lines 263-272
					$key21 = $key2->next();
					#/src/maglev/MagLevTypes.hx:264: lines 264-271
					if ($key1 === $key21) {
						#/src/maglev/MagLevTypes.hx:265: characters 25-37
						$found = true;
						#/src/maglev/MagLevTypes.hx:266: characters 25-57
						$val = ($this->values->data[$key1] ?? null);
						#/src/maglev/MagLevTypes.hx:267: characters 25-63
						$val2 = ($obj->values->data[$key21] ?? null);
						#/src/maglev/MagLevTypes.hx:268: lines 268-270
						if ($val->isEqual($val2)) {
							#/src/maglev/MagLevTypes.hx:269: characters 29-41
							$equal = true;
						}
					}
				}
				#/src/maglev/MagLevTypes.hx:273: lines 273-275
				if (!$found || !$equal) {
					#/src/maglev/MagLevTypes.hx:274: characters 21-33
					return false;
				}
			}
			#/src/maglev/MagLevTypes.hx:277: characters 13-24
			return true;
		} else {
			#/src/maglev/MagLevTypes.hx:280: characters 13-25
			return false;
		}
	}

	/**
	 * @return MagLevArray
	 */
	public function keys () {
		#/src/maglev/MagLevTypes.hx:239: characters 9-49
		$arr = new MagLevArray();
		#/src/maglev/MagLevTypes.hx:240: characters 18-31
		$k = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($this->values->data))));
		while ($k->hasNext()) {
			#/src/maglev/MagLevTypes.hx:240: lines 240-242
			$k1 = $k->next();
			#/src/maglev/MagLevTypes.hx:241: characters 13-42
			$arr->push(new MagLevString($k1));
		}
		#/src/maglev/MagLevTypes.hx:243: characters 9-19
		return $arr;
	}

	/**
	 * @param string $key
	 * 
	 * @return bool
	 */
	public function remove ($key) {
		#/src/maglev/MagLevTypes.hx:246: characters 16-34
		return $this->values->remove($key);
	}

	/**
	 * @param string $key
	 * @param MagLevAny $value
	 * 
	 * @return void
	 */
	public function set ($key, $value) {
		#/src/maglev/MagLevTypes.hx:249: characters 9-48
		$this1 = $this->values;
		$value1 = MagLevNull::wrap($value);
		$this1->data[$key] = $value1;
	}

	/**
	 * @return MagLevString
	 */
	public function toJson () {
		#/src/maglev/MagLevTypes.hx:284: characters 9-28
		$s = "{";
		#/src/maglev/MagLevTypes.hx:285: characters 9-31
		$first = true;
		#/src/maglev/MagLevTypes.hx:286: characters 21-34
		$key = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($this->values->data))));
		while ($key->hasNext()) {
			#/src/maglev/MagLevTypes.hx:286: lines 286-294
			$key1 = $key->next();
			#/src/maglev/MagLevTypes.hx:287: lines 287-289
			if (!$first) {
				#/src/maglev/MagLevTypes.hx:288: characters 17-26
				$s = ($s??'null') . ", ";
			}
			#/src/maglev/MagLevTypes.hx:290: characters 13-21
			$s = ($s??'null') . ($key1??'null');
			#/src/maglev/MagLevTypes.hx:291: characters 13-22
			$s = ($s??'null') . ": ";
			#/src/maglev/MagLevTypes.hx:292: characters 13-38
			$s = ($s??'null') . (\Std::string(($this->values->data[$key1] ?? null)->toJson())??'null');
			#/src/maglev/MagLevTypes.hx:293: characters 13-26
			$first = false;
		}
		#/src/maglev/MagLevTypes.hx:295: characters 9-17
		$s = ($s??'null') . "}";
		#/src/maglev/MagLevTypes.hx:296: characters 9-35
		return new MagLevString($s);
	}
}

Boot::registerClass(MagLevObject::class, 'maglev.MagLevObject');
