<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace maglev;

use \php\Boot;
use \maglev\_MagLev\MagLevType_Impl_;

class MagLevResult {
	/**
	 * @var MagLevError
	 */
	public $error;
	/**
	 * @var MagLevAny
	 */
	public $result;

	/**
	 * @param MagLevError $err
	 * 
	 * @return MagLevResult
	 */
	public static function fromError ($err) {
		#/src/maglev/MagLev.hx:128: characters 9-54
		$result = new MagLevResult();
		#/src/maglev/MagLev.hx:129: characters 9-29
		$result->setError($err);
		#/src/maglev/MagLev.hx:130: characters 9-22
		return $result;
	}

	/**
	 * @param MagLevAny $res
	 * 
	 * @return MagLevResult
	 */
	public static function fromResult ($res) {
		#/src/maglev/MagLev.hx:123: characters 9-54
		$result = new MagLevResult();
		#/src/maglev/MagLev.hx:124: characters 9-30
		$result->setResult($res);
		#/src/maglev/MagLev.hx:125: characters 9-22
		return $result;
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#/src/maglev/MagLev.hx:134: characters 9-34
		$this->result = new MagLevNull();
		#/src/maglev/MagLev.hx:135: characters 9-21
		$this->error = null;
	}

	/**
	 * @return MagLevError
	 */
	public function getError () {
		#/src/maglev/MagLev.hx:148: characters 9-21
		return $this->error;
	}

	/**
	 * @return MagLevAny
	 */
	public function getResult () {
		#/src/maglev/MagLev.hx:141: characters 9-22
		return $this->result;
	}

	/**
	 * @return int
	 */
	public function getType () {
		#/src/maglev/MagLev.hx:155: characters 9-44
		return MagLevType_Impl_::$MagLevType_Result;
	}

	/**
	 * @param MagLevResult $other
	 * 
	 * @return bool
	 */
	public function isEqual ($other) {
		#/src/maglev/MagLev.hx:159: lines 159-169
		if ($this->isError() === $other->isError()) {
			#/src/maglev/MagLev.hx:161: lines 161-165
			if ($this->isError()) {
				#/src/maglev/MagLev.hx:162: characters 17-60
				return $this->getError()->isEqual($other->getError());
			} else {
				#/src/maglev/MagLev.hx:164: characters 17-62
				return $this->getResult()->isEqual($other->getResult());
			}
		} else {
			#/src/maglev/MagLev.hx:168: characters 13-25
			return false;
		}
	}

	/**
	 * @return bool
	 */
	public function isError () {
		#/src/maglev/MagLev.hx:138: characters 9-30
		return $this->result === null;
	}

	/**
	 * @param MagLevError $err
	 * 
	 * @return void
	 */
	public function setError ($err) {
		#/src/maglev/MagLev.hx:151: characters 9-22
		$this->result = null;
		#/src/maglev/MagLev.hx:152: characters 9-20
		$this->error = $err;
	}

	/**
	 * @param MagLevAny $res
	 * 
	 * @return void
	 */
	public function setResult ($res) {
		#/src/maglev/MagLev.hx:144: characters 9-21
		$this->result = $res;
		#/src/maglev/MagLev.hx:145: characters 9-21
		$this->error = null;
	}

	/**
	 * @return MagLevString
	 */
	public function toJson () {
		#/src/maglev/MagLev.hx:172: characters 9-33
		$res = "null";
		#/src/maglev/MagLev.hx:173: characters 9-33
		$err = "null";
		#/src/maglev/MagLev.hx:174: lines 174-178
		if ($this->isError()) {
			#/src/maglev/MagLev.hx:175: characters 13-45
			$err = $this->error->toJson()->getString();
		} else {
			#/src/maglev/MagLev.hx:177: characters 13-46
			$res = $this->result->toJson()->getString();
		}
		#/src/maglev/MagLev.hx:179: characters 9-81
		return new MagLevString("{\"result\": " . ($res??'null') . ", \"error\": " . ($err??'null') . "}");
	}
}

Boot::registerClass(MagLevResult::class, 'maglev.MagLevResult');
