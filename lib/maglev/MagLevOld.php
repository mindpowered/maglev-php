<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace maglev;

use \php\Boot;
use \haxe\Exception;

class MagLevOld {
	/**
	 * @var MagLev
	 */
	public $maglev;

	/**
	 * @param string $key
	 * 
	 * @return MagLevOld
	 */
	public static function getInstance ($key) {
		#/src/maglev/MagLevOld.hx:49: characters 9-73
		$instance = new MagLevOld(MagLev::getInstance($key));
		#/src/maglev/MagLevOld.hx:50: characters 9-24
		return $instance;
	}

	/**
	 * @param MagLev $maglev
	 * 
	 * @return void
	 */
	public function __construct ($maglev) {
		#/src/maglev/MagLevOld.hx:45: characters 7-27
		$this->maglev = $maglev;
	}

	/**
	 * @param string $method
	 * @param \Array_hx $args
	 * 
	 * @return mixed
	 */
	public function call ($method, $args) {
		#/src/maglev/MagLevOld.hx:68: characters 9-52
		$myargs = new MagLevArray();
		#/src/maglev/MagLevOld.hx:69: lines 69-71
		$_g = 0;
		while ($_g < $args->length) {
			#/src/maglev/MagLevOld.hx:69: characters 14-17
			$arg = ($args->arr[$_g] ?? null);
			#/src/maglev/MagLevOld.hx:69: lines 69-71
			++$_g;
			#/src/maglev/MagLevOld.hx:70: characters 13-46
			$myargs->push($this->convertToMagLev($arg));
		}
		#/src/maglev/MagLevOld.hx:72: characters 9-57
		$myresult = $this->maglev->call($method, $myargs);
		#/src/maglev/MagLevOld.hx:73: lines 73-77
		if ($myresult->isError()) {
			#/src/maglev/MagLevOld.hx:74: characters 13-18
			throw Exception::thrown($myresult->getError()->getMessage());
		} else {
			#/src/maglev/MagLevOld.hx:76: characters 13-55
			return $this->convertToHaxe($myresult->getResult());
		}
	}

	/**
	 * @param MagLevAny $x
	 * 
	 * @return string
	 */
	public function convertToHaxe ($x) {
		#/src/maglev/MagLevOld.hx:104: lines 104-113
		if ($x->getType() === MagLevType::MagLevType_Null()) {
			#/src/maglev/MagLevOld.hx:105: characters 13-24
			return null;
		} else if ($x->getType() === MagLevType::MagLevType_String()) {
			#/src/maglev/MagLevOld.hx:108: characters 13-43
			$y = Boot::typedCast(Boot::getClass(MagLevString::class), $x);
			#/src/maglev/MagLevOld.hx:109: characters 13-33
			return $y->getString();
		} else {
			#/src/maglev/MagLevOld.hx:112: characters 13-18
			throw Exception::thrown("convertToHaxe: unknown type");
		}
	}

	/**
	 * @param mixed $x
	 * 
	 * @return MagLevString
	 */
	public function convertToMagLev ($x) {
		#/src/maglev/MagLevOld.hx:117: lines 117-122
		if (is_string($x)) {
			#/src/maglev/MagLevOld.hx:118: characters 13-39
			return new MagLevString($x);
		} else {
			#/src/maglev/MagLevOld.hx:121: characters 13-18
			throw Exception::thrown("convertToMagLev: unknown type");
		}
	}

	/**
	 * @param string $event
	 * @param \Array_hx $args
	 * 
	 * @return void
	 */
	public function emit ($event, $args) {
		#/src/maglev/MagLevOld.hx:96: characters 9-52
		$myargs = new MagLevArray();
		#/src/maglev/MagLevOld.hx:97: lines 97-99
		$_g = 0;
		while ($_g < $args->length) {
			#/src/maglev/MagLevOld.hx:97: characters 14-17
			$arg = ($args->arr[$_g] ?? null);
			#/src/maglev/MagLevOld.hx:97: lines 97-99
			++$_g;
			#/src/maglev/MagLevOld.hx:98: characters 13-46
			$myargs->push($this->convertToMagLev($arg));
		}
		#/src/maglev/MagLevOld.hx:100: characters 3-34
		$this->maglev->emit($event, $myargs);
	}

	/**
	 * @param string $event
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function listen ($event, $callback) {
		#/src/maglev/MagLevOld.hx:80: lines 80-93
		$_gthis = $this;
		#/src/maglev/MagLevOld.hx:82: lines 82-90
		$mysub = function ($args) use (&$event, &$_gthis, &$callback) {
			#/src/maglev/MagLevOld.hx:83: characters 13-52
			$arr = new \Array_hx();
			#/src/maglev/MagLevOld.hx:84: characters 13-23
			$i = 0;
			#/src/maglev/MagLevOld.hx:85: lines 85-87
			while ($i < $args->size()) {
				#/src/maglev/MagLevOld.hx:86: characters 17-53
				$x = $_gthis->convertToHaxe($args->get($i));
				$arr->arr[$arr->length++] = $x;
			}
			#/src/maglev/MagLevOld.hx:88: characters 13-33
			$callback($event, $arr);
			#/src/maglev/MagLevOld.hx:89: characters 13-24
			return null;
		};
		#/src/maglev/MagLevOld.hx:91: characters 9-67
		$mycallback = new MagLevFunction($mysub);
		#/src/maglev/MagLevOld.hx:92: characters 9-46
		$this->maglev->listen($event, $mycallback);
	}

	/**
	 * @param string $method
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function register ($method, $callback) {
		#/src/maglev/MagLevOld.hx:53: lines 53-65
		$_gthis = $this;
		#/src/maglev/MagLevOld.hx:54: lines 54-62
		$myfunc = function ($args) use (&$_gthis, &$callback) {
			#/src/maglev/MagLevOld.hx:55: characters 13-51
			$arr = new \Array_hx();
			#/src/maglev/MagLevOld.hx:56: characters 13-23
			$i = 0;
			#/src/maglev/MagLevOld.hx:57: lines 57-59
			while ($i < $args->size()) {
				#/src/maglev/MagLevOld.hx:58: characters 17-53
				$x = $_gthis->convertToHaxe($args->get($i));
				$arr->arr[$arr->length++] = $x;
			}
			#/src/maglev/MagLevOld.hx:60: characters 13-67
			$result = $_gthis->convertToMagLev($callback($arr));
			#/src/maglev/MagLevOld.hx:61: characters 13-51
			return MagLevResult::fromResult($result);
		};
		#/src/maglev/MagLevOld.hx:63: characters 9-68
		$mycallback = new MagLevFunction($myfunc);
		#/src/maglev/MagLevOld.hx:64: characters 3-43
		$this->maglev->register($method, $mycallback);
	}
}

Boot::registerClass(MagLevOld::class, 'maglev.MagLevOld');
