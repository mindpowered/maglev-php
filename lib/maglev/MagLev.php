<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace maglev;

use \php\Boot;
use \haxe\Exception;
use \haxe\IMap;
use \haxe\ds\StringMap;

class MagLev {
	/**
	 * @var StringMap
	 */
	static public $_instances;

	/**
	 * @var StringMap
	 */
	public $_listeners;
	/**
	 * @var StringMap
	 */
	public $_methods;

	/**
	 * @param mixed $arg
	 * 
	 * @return mixed
	 */
	public static function clean ($arg) {
		#/src/maglev/MagLev.hx:92: lines 92-104
		if (!is_string($arg) && \Reflect::isObject($arg) && !($arg instanceof IMap)) {
			#/src/maglev/MagLev.hx:94: characters 13-44
			$keys = \Reflect::fields($arg);
			#/src/maglev/MagLev.hx:95: characters 13-61
			$map = new StringMap();
			#/src/maglev/MagLev.hx:96: lines 96-100
			$_g = 0;
			while ($_g < $keys->length) {
				#/src/maglev/MagLev.hx:96: characters 18-21
				$key = ($keys->arr[$_g] ?? null);
				#/src/maglev/MagLev.hx:96: lines 96-100
				++$_g;
				#/src/maglev/MagLev.hx:97: characters 17-51
				$val = \Reflect::field($arg, $key);
				#/src/maglev/MagLev.hx:99: characters 17-45
				$v = MagLev::clean($val);
				$map->data[$key] = $v;
			}
			#/src/maglev/MagLev.hx:101: characters 13-23
			return $map;
		} else {
			#/src/maglev/MagLev.hx:103: characters 13-23
			return $arg;
		}
	}

	/**
	 * @param string $key
	 * 
	 * @return MagLev
	 */
	public static function getInstance ($key) {
		#/src/maglev/MagLev.hx:48: lines 48-50
		if (!array_key_exists($key, MagLev::$_instances->data)) {
			#/src/maglev/MagLev.hx:49: characters 5-35
			$this1 = MagLev::$_instances;
			$v = new MagLev();
			$this1->data[$key] = $v;
		}
		#/src/maglev/MagLev.hx:51: characters 10-25
		return (MagLev::$_instances->data[$key] ?? null);
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#/src/maglev/MagLev.hx:42: characters 63-112
		$this->_listeners = new StringMap();
		#/src/maglev/MagLev.hx:41: characters 45-78
		$this->_methods = new StringMap();
	}

	/**
	 * @param string $method
	 * @param \Array_hx $args
	 * 
	 * @return mixed
	 */
	public function call ($method, $args) {
		#/src/maglev/MagLev.hx:59: lines 59-67
		if (array_key_exists($method, $this->_methods->data)) {
			#/src/maglev/MagLev.hx:60: characters 13-53
			$args2 = new \Array_hx();
			#/src/maglev/MagLev.hx:61: lines 61-63
			$_g = 0;
			while ($_g < $args->length) {
				#/src/maglev/MagLev.hx:61: characters 18-21
				$arg = ($args->arr[$_g] ?? null);
				#/src/maglev/MagLev.hx:61: lines 61-63
				++$_g;
				#/src/maglev/MagLev.hx:62: characters 17-46
				$x = MagLev::clean($arg);
				$args2->arr[$args2->length++] = $x;
			}
			#/src/maglev/MagLev.hx:64: characters 13-43
			return ($this->_methods->data[$method] ?? null)($args2);
		} else {
			#/src/maglev/MagLev.hx:66: characters 4-9
			throw Exception::thrown("Method '" . ($method??'null') . "' not registered");
		}
	}

	/**
	 * @param string $event
	 * @param \Array_hx $args
	 * 
	 * @return void
	 */
	public function emit ($event, $args) {
		#/src/maglev/MagLev.hx:79: lines 79-88
		if (array_key_exists($event, $this->_listeners->data)) {
			#/src/maglev/MagLev.hx:80: characters 13-53
			$args2 = new \Array_hx();
			#/src/maglev/MagLev.hx:81: lines 81-83
			$_g = 0;
			while ($_g < $args->length) {
				#/src/maglev/MagLev.hx:81: characters 18-21
				$arg = ($args->arr[$_g] ?? null);
				#/src/maglev/MagLev.hx:81: lines 81-83
				++$_g;
				#/src/maglev/MagLev.hx:82: characters 17-46
				$x = MagLev::clean($arg);
				$args2->arr[$args2->length++] = $x;
			}
			#/src/maglev/MagLev.hx:84: characters 4-38
			$listeners = ($this->_listeners->data[$event] ?? null);
			#/src/maglev/MagLev.hx:85: lines 85-87
			$_g = 0;
			while ($_g < $listeners->length) {
				#/src/maglev/MagLev.hx:85: characters 8-16
				$listener = ($listeners->arr[$_g] ?? null);
				#/src/maglev/MagLev.hx:85: lines 85-87
				++$_g;
				#/src/maglev/MagLev.hx:86: characters 5-27
				$listener($event, $args2);
			}
		}
	}

	/**
	 * @param string $event
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function listen ($event, $callback) {
		#/src/maglev/MagLev.hx:72: lines 72-74
		if (!array_key_exists($event, $this->_listeners->data)) {
			#/src/maglev/MagLev.hx:73: characters 4-61
			$this1 = $this->_listeners;
			$v = new \Array_hx();
			$this1->data[$event] = $v;
		}
		#/src/maglev/MagLev.hx:75: characters 3-35
		$_this = ($this->_listeners->data[$event] ?? null);
		$_this->arr[$_this->length++] = $callback;
	}

	/**
	 * @param string $method
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function register ($method, $callback) {
		#/src/maglev/MagLev.hx:55: characters 3-30
		$this->_methods->data[$method] = $callback;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$_instances = new StringMap();
	}
}

Boot::registerClass(MagLev::class, 'maglev.MagLev');
MagLev::__hx__init();
