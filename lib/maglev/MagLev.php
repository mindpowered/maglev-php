<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace maglev;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;

class MagLev {
	/**
	 * @var StringMap
	 */
	static public $_instances;


	/**
	 * @var StringMap
	 */
	public $_listeners;
	/**
	 * @var StringMap
	 */
	public $_methods;


	/**
	 * @param string $key
	 * 
	 * @return MagLev
	 */
	static public function getInstance ($key) {
		#/src/maglev/MagLev.hx:20: lines 20-22
		if (!array_key_exists($key, MagLev::$_instances->data)) {
			#/src/maglev/MagLev.hx:21: characters 4-34
			$this1 = MagLev::$_instances;
			#/src/maglev/MagLev.hx:21: characters 4-34
			$v = new MagLev();
			#/src/maglev/MagLev.hx:21: characters 4-34
			$this1->data[$key] = $v;
		}
		#/src/maglev/MagLev.hx:23: characters 9-24
		return (MagLev::$_instances->data[$key] ?? null);
	}


	/**
	 * @return void
	 */
	public function __construct () {
		#/src/maglev/MagLev.hx:14: characters 62-111
		$this->_listeners = new StringMap();
		#/src/maglev/MagLev.hx:13: characters 44-77
		$this->_methods = new StringMap();
	}


	/**
	 * @param string $method
	 * @param \Array_hx $args
	 * 
	 * @return mixed
	 */
	public function call ($method, $args) {
		#/src/maglev/MagLev.hx:31: lines 31-35
		if (array_key_exists($method, $this->_methods->data)) {
			#/src/maglev/MagLev.hx:32: characters 6-35
			return ($this->_methods->data[$method] ?? null)($args);
		} else {
			#/src/maglev/MagLev.hx:34: characters 3-8
			throw new HxException("Method '" . ($method??'null') . "' not registered");
		}
	}


	/**
	 * @param string $event
	 * @param \Array_hx $args
	 * 
	 * @return void
	 */
	public function emit ($event, $args) {
		#/src/maglev/MagLev.hx:47: lines 47-52
		if (array_key_exists($event, $this->_listeners->data)) {
			#/src/maglev/MagLev.hx:48: characters 3-37
			$listeners = ($this->_listeners->data[$event] ?? null);
			#/src/maglev/MagLev.hx:49: lines 49-51
			$_g = 0;
			#/src/maglev/MagLev.hx:49: lines 49-51
			while ($_g < $listeners->length) {
				#/src/maglev/MagLev.hx:49: characters 7-15
				$listener = ($listeners->arr[$_g] ?? null);
				#/src/maglev/MagLev.hx:49: lines 49-51
				$_g = $_g + 1;
				#/src/maglev/MagLev.hx:50: characters 4-25
				$listener($event, $args);
			}

		}
	}


	/**
	 * @param string $event
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function listen ($event, $callback) {
		#/src/maglev/MagLev.hx:40: lines 40-42
		if (!array_key_exists($event, $this->_listeners->data)) {
			#/src/maglev/MagLev.hx:41: characters 3-60
			$this1 = $this->_listeners;
			#/src/maglev/MagLev.hx:41: characters 3-60
			$v = new \Array_hx();
			#/src/maglev/MagLev.hx:41: characters 3-60
			$this1->data[$event] = $v;
		}
		#/src/maglev/MagLev.hx:43: characters 2-34
		$_this = ($this->_listeners->data[$event] ?? null);
		#/src/maglev/MagLev.hx:43: characters 2-34
		$_this->arr[$_this->length] = $callback;
		#/src/maglev/MagLev.hx:43: characters 2-34
		++$_this->length;

	}


	/**
	 * @param string $method
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function register ($method, $callback) {
		#/src/maglev/MagLev.hx:27: characters 2-29
		$this->_methods->data[$method] = $callback;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$_instances = new StringMap();
	}
}


Boot::registerClass(MagLev::class, 'maglev.MagLev');
MagLev::__hx__init();
